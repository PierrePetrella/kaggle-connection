/* This file is the descriptor for the python runnable kaggle-competition-importer */
{
    "meta": {
        "label": "kaggle-competition-submit",

        "description": "This macro will submit results for a given competition",

        // icon: must be one of the FontAwesome 3.2.1 icons, complete list here at https://fontawesome.com/v3.2.1/icons/
        "icon": "icon-trophy"
    },

    /* whether the runnable's code is untrusted */
    "impersonate": false,


    /* params:
    DSS will generate a formular from this list of requested parameters.
    Your component code can then access the value provided by users using the "name" field of each parameter.

    Available parameter types include:
    STRING, INT, DOUBLE, BOOLEAN, DATE, SELECT, TEXTAREA, DATASET, DATASET_COLUMN, MANAGED_FOLDER, PRESET and others.

    For the full list and for more details, see the documentation: https://doc.dataiku.com/dss/latest/plugins/reference/params.html
    */
    "params": [
        {
            "name": "KAGGLE_CHALLENGE_URL",
            "label": "Kaggle Competition URL",
            "type": "STRING",
            "description": "Get a kaggle competition url by copying the home page url of the competition, the competition id also works. You must register in to the competition before being able to load it into DSS",
            "mandatory": true
        },
        {
            "name": "KAGGLE_KEY",
            "label": "Kaggle user API key",
            "type": "STRING",
            "description": "Get your API key by generating it in Account > API > Create New API token",
            "mandatory": true
        },
        {
            "name": "KAGGLE_USERNAME",
            "label": "Kaggle Username",
            "type": "STRING",
            "description": "This is your Kaggle username",
            "mandatory": true
        },
        {
            "name": "connection",
            "label": "Connection",
            "type": "STRING",
            "description": "Name of the connection to store kaggle data into",
            "mandatory": true
        },{
            "name": "SUBMISSION_DATASET",
            "label": "Submission Dataset name",
            "type": "STRING",
            "description": "This DSS dataset will be submitted directly to the given kaggle competition. It must already be in the correct format",
            "mandatory": true
        },{
            "name": "SUBMISSION_FILE_NAME",
            "label": "Submission file name",
            "type": "STRING",
            "description": "This will be the name of the file that you will be sending to kaggle as your submission",
            "mandatory": false,
            "defaultValue": "submission"
        },{
            "name": "SUBMISSION_DESC",
            "label": "Description of the sumbission",
            "type": "TEXTAREA",
            "description": "This will be the description field of your kaggle submission",
            "mandatory": false,
            "defaultValue": "my submission from DSS"
        }

    ],

    /* list of required permissions on the project to see/run the runnable */
    "permissions": [],

    /* what the code's run() returns:
       - NONE : no result
       - HTML : a string that is a html (utf8 encoded)
       - FOLDER_FILE : a (folderId, path) pair to a file in a folder of this project (json-encoded)
       - FILE : raw data (as a python string) that will be stored in a temp file by DSS
       - URL : a url
     */
    "resultType": "NONE",

    /* label to use when the runnable's result is not inlined in the UI (ex: for urls) */
    "resultLabel": "kaggle submission",

    /* for FILE resultType, the extension to use for the temp file */
    "extension": "txt",

    /* for FILE resultType, the type of data stored in the temp file */
    "mimeType": "text/plain",

    /* Macro roles define where this macro will appear in DSS GUI. They are used to pre-fill a macro parameter with context.

       Each role consists of:
        - type: where the macro will be shown
            * when selecting DSS object(s): DATASET, DATASETS, API_SERVICE, API_SERVICE_VERSION, BUNDLE, VISUAL_ANALYSIS, SAVED_MODEL, MANAGED_FOLDER
            * in the global project list: PROJECT_MACROS
        - targetParamsKey(s): name of the parameter(s) that will be filled with the selected object
    */
    "macroRoles": [
     /* {
            "type": "PROJECT_MACROS",
            "targetParamsKey": "kaggle_connection"
        } */
    ]
}